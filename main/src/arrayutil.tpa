ACTION_IF NOT VARIABLE_IS_SET ARRAYUTIL THEN BEGIN
OUTER_TEXT_SPRINT ARRAYUTIL  ~ARRAYUTIL~

/** Modifies the content of an array around a given index.
  * Separate arguments result in different type of modifications; providing multiple is possible.
  * Leaving the default value (~~) means that type of modification is not performed.
  * Allowed operations, and the order in which they are performed are as follows:
  *  - delete = <number>:  delete that many elements from the array, starting with index %at%;
  *  - set = <json>:       update the %at%-th element of the array to the given value
  *  - insert = <json>:    insert the new element at index %at%, pushing all items from that index 
  *                        further back (so the index of current item at %at% will be %at%+1 and so on).
  *  - insertall=<jarray>: insert all elements of the given array into the given array, pushing all
  *                        items currently at index %at% and above n slots further, where n is the number
  *                        of elements in the array.
  */
DEFINE_ACTION_FUNCTION update_array
	INT_VAR 
		/** Index in the modified array at which the change is made. Must be `0 <= at < size`
		  * (where size is the size of the array) for set and delete operations, 
		  * can be equal to size for insert/insertall. */
		at = 0
		/** Number of elements to delete from the array starting with index %at%. */
		delete = 0
		/** If specified, only that many first elements  of the array are considered.
		  * Useful when another function returns a non-empty array due to the weidu
		  * limitation of array initialization, while simultaneously specifying zero size.
		  */
		size = 2147483647
	STR_VAR 
		/** The name of variable array construct to modify. */
		array = ~~
		/** Insert a new element to the array at the given index. Current element and all following are
		  * pushed up by 1. Must be valid json. */
		insert = ~~
		/** List of elements to insert at the given index in the json array format. All elements in
		  * the modified array from index %at% are pushed up to make space. */
		insertall = ~~
//	RET_ARRAY 
//		/** The array after the modification(s) in the json format. */
//		res
	BEGIN		
		//ACTION_IF size < 0 THEN BEGIN
		//	OUTER_SET size = 0
		//	ACTION_PHP_EACH ~%array%~ AS _ => _ BEGIN
		//		OUTER_SET size += 1
		//	END
		//END
		ACTION_IF at < 0 OR at > size THEN BEGIN
			FAIL ~update_array: index %at% out of range <0..%size%>~
		END
		
		ACTION_IF delete > 0 OR NOT ~%insert%~ STR_EQ ~~ OR NOT ~%insertall%~ STR_EQ ~~ THEN BEGIN
			ACTION_PHP_EACH ~%array%~ AS i => val BEGIN
				ACTION_IF i > at THEN BEGIN
					
				END ELSE ACTION_IF i == at THEN BEGIN
					OUTER_SET j = at
					ACTION_IF delete > 0 THEN BEGIN
						OUTER_SET j += delete
					END
					
					ACTION_IF NOT ~%insert%~ STR_EQ ~~ THEN BEGIN
						
				END
				OUTER_SET i += 1
			END
			
			
			OUTER_FOR (i=0; i < at; ++i) BEGIN
				OUTER_TEXT_SPRINT $result(~%i%~) $array(~%i%~)
			END
			
			OUTER_SET i = at
			OUTER_SET j = at
			ACTION_IF delete > 0 THEN BEGIN
				OUTER_SET j += delete
			END	
			
			ACTION_IF NOT ~%insert%~ STR_EQ ~~ THEN BEGIN
				LAF validate_json STR_VAR
					logprefix = ~update_json_array insert: ~
					json = EVAL ~%insert%~
				END				
				OUTER_TEXT_SPRINT $result(~%i%~) ~%insert%~
				OUTER_SET i += 1
			END
			
			ACTION_IF NOT ~%insertall%~ STR_EQ ~~ THEN BEGIN
				LAF json_to_raw_array
					STR_VAR json = EVAL ~%insertall%~ 
					RET count = size RET_ARRAY elems = res END
				OUTER_FOR (k=0; k<count; ++k) BEGIN
					OUTER_TEXT_SPRINT $result(~%i%~) $elems(~%k%~)
					OUTER_SET i += 1
				END
			END
			
			ACTION_IF NOT ~%set%~ STR_EQ ~~ THEN BEGIN
				ACTION_IF j >= size THEN BEGIN
					FAIL ~update_json_array: set index %at% out of range.~
				END
				LAF validate_json STR_VAR
					logprefix = ~update_json_array set: ~
					json = EVAL ~%set%~
				END
				
				OUTER_TEXT_SPRINT $result(~%i%~) ~%set%~
				OUTER_SET j += 1
				OUTER_SET i += 1
			END

			OUTER_WHILE j < size BEGIN
				OUTER_TEXT_SPRINT $result(~%i%~) $array(~%j%~)
				OUTER_SET j += 1
				OUTER_SET i += 1
			END
			
			
		END ELSE ACTION_IF NOT ~%set%~ STR_EQ ~~ THEN BEGIN
			ACTION_IF at < 0 OR at >= size THEN BEGIN
				FAIL ~update_json_array: index %at% out of range <0..%size%)~
			END
			
			OUTER_TEXT_SPRINT $array(~%at%~) ~%set%~
		
		END	ELSE BEGIN
			WARN ~update_array: delete, set, insert or insertall argument required~
		END
	END


END //ARRAYUTIL